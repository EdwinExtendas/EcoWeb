/*! X-editable - v1.5.0
* In-place editing with Twitter Bootstrap, jQuery UI or pure jQuery
* http://github.com/vitalets/x-editable
* Copyright (c) 2013 Vitaliy Potapov; Licensed MIT */
!(function (a) { 'use strict'; const b = function (b, c) { this.options = a.extend({}, a.fn.editableform.defaults, c), this.$div = a(b), this.options.scope || (this.options.scope = this) }; b.prototype = { constructor: b, initInput () { this.input = this.options.input, this.value = this.input.str2value(this.options.value), this.input.prerender() }, initTemplate () { this.$form = a(a.fn.editableform.template) }, initButtons () { const b = this.$form.find('.editable-buttons'); b.append(a.fn.editableform.buttons), this.options.showbuttons === 'bottom' && b.addClass('editable-buttons-bottom') }, render () { this.$loading = a(a.fn.editableform.loading), this.$div.empty().append(this.$loading), this.initTemplate(), this.options.showbuttons ? this.initButtons() : this.$form.find('.editable-buttons').remove(), this.showLoading(), this.isSaving = !1, this.$div.triggerHandler('rendering'), this.initInput(), this.$form.find('div.editable-input').append(this.input.$tpl), this.$div.append(this.$form), a.when(this.input.render()).then(a.proxy(function () { if (this.options.showbuttons || this.input.autosubmit(), this.$form.find('.editable-cancel').click(a.proxy(this.cancel, this)), this.input.error) { this.error(this.input.error), this.$form.find('.editable-submit').attr('disabled', !0), this.input.$input.attr('disabled', !0), this.$form.submit(function (a) { a.preventDefault() }) } else { this.error(!1), this.input.$input.removeAttr('disabled'), this.$form.find('.editable-submit').removeAttr('disabled'); const b = this.value === null || void 0 === this.value || this.value === '' ? this.options.defaultValue : this.value; this.input.value2input(b), this.$form.submit(a.proxy(this.submit, this)) } this.$div.triggerHandler('rendered'), this.showForm(), this.input.postrender && this.input.postrender() }, this)) }, cancel () { this.$div.triggerHandler('cancel') }, showLoading () { let a, b; this.$form ? (a = this.$form.outerWidth(), b = this.$form.outerHeight(), a && this.$loading.width(a), b && this.$loading.height(b), this.$form.hide()) : (a = this.$loading.parent().width(), a && this.$loading.width(a)), this.$loading.show() }, showForm (a) { this.$loading.hide(), this.$form.show(), a !== !1 && this.input.activate(), this.$div.triggerHandler('show') }, error (b) { let c; const d = this.$form.find('.control-group'); const e = this.$form.find('.editable-error-block'); if (b === !1) { d.removeClass(a.fn.editableform.errorGroupClass), e.removeClass(a.fn.editableform.errorBlockClass).empty().hide() } else { if (b) { c = b.split('\n'); for (let f = 0; f < c.length; f++) { c[f] = a('<div>').text(c[f]).html() }b = c.join('<br>') }d.addClass(a.fn.editableform.errorGroupClass), e.addClass(a.fn.editableform.errorBlockClass).html(b).show() } }, submit (b) { b.stopPropagation(), b.preventDefault(); let c; let d = this.input.input2value(); if (c = this.validate(d)) { return this.error(c), this.showForm(), void 0 } if (!this.options.savenochange && this.input.value2str(d) == this.input.value2str(this.value)) { return this.$div.triggerHandler('nochange'), void 0 } const e = this.input.value2submit(d); this.isSaving = !0, a.when(this.save(e)).done(a.proxy(function (a) { this.isSaving = !1; const b = typeof this.options.success === 'function' ? this.options.success.call(this.options.scope, a, d) : null; return b === !1 ? (this.error(!1), this.showForm(!1), void 0) : typeof b === 'string' ? (this.error(b), this.showForm(), void 0) : (b && typeof b === 'object' && b.hasOwnProperty('newValue') && (d = b.newValue), this.error(!1), this.value = d, this.$div.triggerHandler('save', { newValue: d, submitValue: e, response: a }), void 0) }, this)).fail(a.proxy(function (a) { this.isSaving = !1; let b; b = typeof this.options.error === 'function' ? this.options.error.call(this.options.scope, a, d) : typeof a === 'string' ? a : a.responseText || a.statusText || 'Unknown error!', this.error(b), this.showForm() }, this)) }, save (b) { this.options.pk = a.fn.editableutils.tryParseJson(this.options.pk, !0); let c; const d = typeof this.options.pk === 'function' ? this.options.pk.call(this.options.scope) : this.options.pk; const e = !!(typeof this.options.url === 'function' || this.options.url && (this.options.send === 'always' || this.options.send === 'auto' && d !== null && void 0 !== d)); return e ? (this.showLoading(), c = { name: this.options.name || '', value: b, pk: d }, typeof this.options.params === 'function' ? c = this.options.params.call(this.options.scope, c) : (this.options.params = a.fn.editableutils.tryParseJson(this.options.params, !0), a.extend(c, this.options.params)), typeof this.options.url === 'function' ? this.options.url.call(this.options.scope, c) : a.ajax(a.extend({ url: this.options.url, data: c, type: 'POST' }, this.options.ajaxOptions))) : void 0 }, validate (a) { return void 0 === a && (a = this.value), typeof this.options.validate === 'function' ? this.options.validate.call(this.options.scope, a) : void 0 }, option (a, b) { a in this.options && (this.options[a] = b), a === 'value' && this.setValue(b) }, setValue (a, b) { this.value = b ? this.input.str2value(a) : a, this.$form && this.$form.is(':visible') && this.input.value2input(this.value) } }, a.fn.editableform = function (c) { const d = arguments; return this.each(function () { const e = a(this); let f = e.data('editableform'); const g = typeof c === 'object' && c; f || e.data('editableform', f = new b(this, g)), typeof c === 'string' && f[c].apply(f, Array.prototype.slice.call(d, 1)) }) }, a.fn.editableform.Constructor = b, a.fn.editableform.defaults = { type: 'text', url: null, params: null, name: null, pk: null, value: null, defaultValue: null, send: 'auto', validate: null, success: null, error: null, ajaxOptions: null, showbuttons: !0, scope: null, savenochange: !1 }, a.fn.editableform.template = '<form class="form-inline editableform"><div class="control-group"><div><div class="editable-input"></div><div class="editable-buttons"></div></div><div class="editable-error-block"></div></div></form>', a.fn.editableform.loading = '<div class="editableform-loading"></div>', a.fn.editableform.buttons = '<button type="submit" class="editable-submit">ok</button><button type="button" class="editable-cancel">x</button>', a.fn.editableform.errorGroupClass = null, a.fn.editableform.errorBlockClass = 'editable-error', a.fn.editableform.engine = 'jquery' }(window.jQuery)), (function (a) { 'use strict'; a.fn.editableutils = { inherit (a, b) { const c = function () {}; c.prototype = b.prototype, a.prototype = new c(), a.prototype.constructor = a, a.superclass = b.prototype }, setCursorPosition (a, b) { if (a.setSelectionRange) { a.setSelectionRange(b, b) } else if (a.createTextRange) { const c = a.createTextRange(); c.collapse(!0), c.moveEnd('character', b), c.moveStart('character', b), c.select() } }, tryParseJson (a, b) { if (typeof a === 'string' && a.length && a.match(/^[\{\[].*[\}\]]$/)) { if (b) { try { a = new Function('return ' + a)() } catch (c) {} finally { return a } } else { a = new Function('return ' + a)() } } return a }, sliceObj (b, c, d) { let e; let f; const g = {}; if (!a.isArray(c) || !c.length) { return g } for (let h = 0; h < c.length; h++) { e = c[h], b.hasOwnProperty(e) && (g[e] = b[e]), d !== !0 && (f = e.toLowerCase(), b.hasOwnProperty(f) && (g[e] = b[f])) } return g }, getConfigData (b) { const c = {}; return a.each(b.data(), function (a, b) { (typeof b !== 'object' || b && typeof b === 'object' && (b.constructor === Object || b.constructor === Array)) && (c[a] = b) }), c }, objectKeys (a) { if (Object.keys) { return Object.keys(a) } if (a !== Object(a)) { throw new TypeError('Object.keys called on a non-object') } let b; const c = []; for (b in a) { Object.prototype.hasOwnProperty.call(a, b) && c.push(b) } return c }, escape (b) { return a('<div>').text(b).html() }, itemsByValue (b, c, d) { if (!c || b === null) { return [] } if (typeof d !== 'function') { const e = d || 'value'; d = function (a) { return a[e] } } const f = a.isArray(b); let g = []; const h = this; return a.each(c, function (c, e) { if (e.children) { g = g.concat(h.itemsByValue(b, e.children, d)) } else if (f) { a.grep(b, function (a) { return a == (e && typeof e === 'object' ? d(e) : e) }).length && g.push(e) } else { const i = e && typeof e === 'object' ? d(e) : e; b == i && g.push(e) } }), g }, createInput (b) { let c; let d; let e; let f = b.type; return f === 'date' && (b.mode === 'inline' ? a.fn.editabletypes.datefield ? f = 'datefield' : a.fn.editabletypes.dateuifield && (f = 'dateuifield') : a.fn.editabletypes.date ? f = 'date' : a.fn.editabletypes.dateui && (f = 'dateui'), f !== 'date' || a.fn.editabletypes.date || (f = 'combodate')), f === 'datetime' && b.mode === 'inline' && (f = 'datetimefield'), f !== 'wysihtml5' || a.fn.editabletypes[f] || (f = 'textarea'), typeof a.fn.editabletypes[f] === 'function' ? (c = a.fn.editabletypes[f], d = this.sliceObj(b, this.objectKeys(c.defaults)), e = new c(d)) : (a.error('Unknown type: ' + f), !1) }, supportsTransitions () { const a = document.body || document.documentElement; const b = a.style; let c = 'transition'; const d = ['Moz', 'Webkit', 'Khtml', 'O', 'ms']; if (typeof b[c] === 'string') { return !0 } c = c.charAt(0).toUpperCase() + c.substr(1); for (let e = 0; e < d.length; e++) { if (typeof b[d[e] + c] === 'string') { return !0 } } return !1 } } }(window.jQuery)), (function (a) { 'use strict'; const b = function (a, b) { this.init(a, b) }; const c = function (a, b) { this.init(a, b) }; b.prototype = { containerName: null, containerDataName: null, innerCss: null, containerClass: 'editable-container editable-popup', defaults: {}, init (c, d) { this.$element = a(c), this.options = a.extend({}, a.fn.editableContainer.defaults, d), this.splitOptions(), this.formOptions.scope = this.$element[0], this.initContainer(), this.delayedHide = !1, this.$element.on('destroyed', a.proxy(function () { this.destroy() }, this)), a(document).data('editable-handlers-attached') || (a(document).on('keyup.editable', function (b) { b.which === 27 && a('.editable-open').editableContainer('hide') }), a(document).on('click.editable', function (c) { let d; const e = a(c.target); const f = ['.editable-container', '.ui-datepicker-header', '.datepicker', '.modal-backdrop', '.bootstrap-wysihtml5-insert-image-modal', '.bootstrap-wysihtml5-insert-link-modal']; if (a.contains(document.documentElement, c.target) && !e.is(document)) { for (d = 0; d < f.length; d++) { if (e.is(f[d]) || e.parents(f[d]).length) { return } } b.prototype.closeOthers(c.target) } }), a(document).data('editable-handlers-attached', !0)) }, splitOptions () { if (this.containerOptions = {}, this.formOptions = {}, !a.fn[this.containerName]) { throw new Error(this.containerName + ' not found. Have you included corresponding js file?') } for (const b in this.options) { b in this.defaults ? this.containerOptions[b] = this.options[b] : this.formOptions[b] = this.options[b] } }, tip () { return this.container() ? this.container().$tip : null }, container () { let a; return this.containerDataName && (a = this.$element.data(this.containerDataName)) ? a : a = this.$element.data(this.containerName) }, call () { this.$element[this.containerName].apply(this.$element, arguments) }, initContainer () { this.call(this.containerOptions) }, renderForm () { this.$form.editableform(this.formOptions).on({ save: a.proxy(this.save, this), nochange: a.proxy(function () { this.hide('nochange') }, this), cancel: a.proxy(function () { this.hide('cancel') }, this), show: a.proxy(function () { this.delayedHide ? (this.hide(this.delayedHide.reason), this.delayedHide = !1) : this.setPosition() }, this), rendering: a.proxy(this.setPosition, this), resize: a.proxy(this.setPosition, this), rendered: a.proxy(function () { this.$element.triggerHandler('shown', a(this.options.scope).data('editable')) }, this) }).editableform('render') }, show (b) { this.$element.addClass('editable-open'), b !== !1 && this.closeOthers(this.$element[0]), this.innerShow(), this.tip().addClass(this.containerClass), this.$form, this.$form = a('<div>'), this.tip().is(this.innerCss) ? this.tip().append(this.$form) : this.tip().find(this.innerCss).append(this.$form), this.renderForm() }, hide (a) { if (this.tip() && this.tip().is(':visible') && this.$element.hasClass('editable-open')) { if (this.$form.data('editableform').isSaving) { return this.delayedHide = { reason: a }, void 0 } this.delayedHide = !1, this.$element.removeClass('editable-open'), this.innerHide(), this.$element.triggerHandler('hidden', a || 'manual') } }, innerShow () {}, innerHide () {}, toggle (a) { this.container() && this.tip() && this.tip().is(':visible') ? this.hide() : this.show(a) }, setPosition () {}, save (a, b) { this.$element.triggerHandler('save', b), this.hide('save') }, option (a, b) { this.options[a] = b, a in this.containerOptions ? (this.containerOptions[a] = b, this.setContainerOption(a, b)) : (this.formOptions[a] = b, this.$form && this.$form.editableform('option', a, b)) }, setContainerOption (a, b) { this.call('option', a, b) }, destroy () { this.hide(), this.innerDestroy(), this.$element.off('destroyed'), this.$element.removeData('editableContainer') }, innerDestroy () {}, closeOthers (b) { a('.editable-open').each(function (c, d) { if (d !== b && !a(d).find(b).length) { const e = a(d); const f = e.data('editableContainer'); f && (f.options.onblur === 'cancel' ? e.data('editableContainer').hide('onblur') : f.options.onblur === 'submit' && e.data('editableContainer').tip().find('form').submit()) } }) }, activate () { this.tip && this.tip().is(':visible') && this.$form && this.$form.data('editableform').input.activate() } }, a.fn.editableContainer = function (d) { const e = arguments; return this.each(function () { const f = a(this); const g = 'editableContainer'; let h = f.data(g); const i = typeof d === 'object' && d; const j = i.mode === 'inline' ? c : b; h || f.data(g, h = new j(this, i)), typeof d === 'string' && h[d].apply(h, Array.prototype.slice.call(e, 1)) }) }, a.fn.editableContainer.Popup = b, a.fn.editableContainer.Inline = c, a.fn.editableContainer.defaults = { value: null, placement: 'top', autohide: !0, onblur: 'cancel', anim: !1, mode: 'popup' }, jQuery.event.special.destroyed = { remove (a) { a.handler && a.handler() } } }(window.jQuery)), (function (a) { 'use strict'; a.extend(a.fn.editableContainer.Inline.prototype, a.fn.editableContainer.Popup.prototype, { containerName: 'editableform', innerCss: '.editable-inline', containerClass: 'editable-container editable-inline', initContainer () { this.$tip = a('<span></span>'), this.options.anim || (this.options.anim = 0) }, splitOptions () { this.containerOptions = {}, this.formOptions = this.options }, tip () { return this.$tip }, innerShow () { this.$element.hide(), this.tip().insertAfter(this.$element).show() }, innerHide () { this.$tip.hide(this.options.anim, a.proxy(function () { this.$element.show(), this.innerDestroy() }, this)) }, innerDestroy () { this.tip() && this.tip().empty().remove() } }) }(window.jQuery)), (function (a) { 'use strict'; const b = function (b, c) { this.$element = a(b), this.options = a.extend({}, a.fn.editable.defaults, c, a.fn.editableutils.getConfigData(this.$element)), this.options.selector ? this.initLive() : this.init(), this.options.highlight && !a.fn.editableutils.supportsTransitions() && (this.options.highlight = !1) }; b.prototype = { constructor: b, init () { let b; let c = !1; if (this.options.name = this.options.name || this.$element.attr('id'), this.options.scope = this.$element[0], this.input = a.fn.editableutils.createInput(this.options), this.input) { switch (void 0 === this.options.value || this.options.value === null ? (this.value = this.input.html2value(a.trim(this.$element.html())), c = !0) : (this.options.value = a.fn.editableutils.tryParseJson(this.options.value, !0), this.value = typeof this.options.value === 'string' ? this.input.str2value(this.options.value) : this.options.value), this.$element.addClass('editable'), this.input.type === 'textarea' && this.$element.addClass('editable-pre-wrapped'), this.options.toggle !== 'manual' ? (this.$element.addClass('editable-click'), this.$element.on(this.options.toggle + '.editable', a.proxy(function (a) { if (this.options.disabled || a.preventDefault(), this.options.toggle === 'mouseenter') { this.show() } else { const b = this.options.toggle !== 'click'; this.toggle(b) } }, this))) : this.$element.attr('tabindex', -1), typeof this.options.display === 'function' && (this.options.autotext = 'always'), this.options.autotext) { case 'always':b = !0; break; case 'auto':b = !a.trim(this.$element.text()).length && this.value !== null && void 0 !== this.value && !c; break; default:b = !1 }a.when(b ? this.render() : !0).then(a.proxy(function () { this.options.disabled ? this.disable() : this.enable(), this.$element.triggerHandler('init', this) }, this)) } }, initLive () { const b = this.options.selector; this.options.selector = !1, this.options.autotext = 'never', this.$element.on(this.options.toggle + '.editable', b, a.proxy(function (b) { const c = a(b.target); c.data('editable') || (c.hasClass(this.options.emptyclass) && c.empty(), c.editable(this.options).trigger(b)) }, this)) }, render (a) { return this.options.display !== !1 ? this.input.value2htmlFinal ? this.input.value2html(this.value, this.$element[0], this.options.display, a) : typeof this.options.display === 'function' ? this.options.display.call(this.$element[0], this.value, a) : this.input.value2html(this.value, this.$element[0]) : void 0 }, enable () { this.options.disabled = !1, this.$element.removeClass('editable-disabled'), this.handleEmpty(this.isEmpty), this.options.toggle !== 'manual' && this.$element.attr('tabindex') === '-1' && this.$element.removeAttr('tabindex') }, disable () { this.options.disabled = !0, this.hide(), this.$element.addClass('editable-disabled'), this.handleEmpty(this.isEmpty), this.$element.attr('tabindex', -1) }, toggleDisabled () { this.options.disabled ? this.enable() : this.disable() }, option (b, c) { return b && typeof b === 'object' ? (a.each(b, a.proxy(function (b, c) { this.option(a.trim(b), c) }, this)), void 0) : (this.options[b] = c, b === 'disabled' ? c ? this.disable() : this.enable() : (b === 'value' && this.setValue(c), this.container && this.container.option(b, c), this.input.option && this.input.option(b, c), void 0)) }, handleEmpty (b) { this.options.display !== !1 && (this.isEmpty = void 0 !== b ? b : typeof this.input.isEmpty === 'function' ? this.input.isEmpty(this.$element) : a.trim(this.$element.html()) === '', this.options.disabled ? this.isEmpty && (this.$element.empty(), this.options.emptyclass && this.$element.removeClass(this.options.emptyclass)) : this.isEmpty ? (this.$element.html(this.options.emptytext), this.options.emptyclass && this.$element.addClass(this.options.emptyclass)) : this.options.emptyclass && this.$element.removeClass(this.options.emptyclass)) }, show (b) { if (!this.options.disabled) { if (this.container) { if (this.container.tip().is(':visible')) { return } } else { const c = a.extend({}, this.options, { value: this.value, input: this.input }); this.$element.editableContainer(c), this.$element.on('save.internal', a.proxy(this.save, this)), this.container = this.$element.data('editableContainer') } this.container.show(b) } }, hide () { this.container && this.container.hide() }, toggle (a) { this.container && this.container.tip().is(':visible') ? this.hide() : this.show(a) }, save (a, b) { if (this.options.unsavedclass) { let c = !1; c = c || typeof this.options.url === 'function', c = c || this.options.display === !1, c = c || void 0 !== b.response, c = c || this.options.savenochange && this.input.value2str(this.value) !== this.input.value2str(b.newValue), c ? this.$element.removeClass(this.options.unsavedclass) : this.$element.addClass(this.options.unsavedclass) } if (this.options.highlight) { const d = this.$element; let e = d.css('background-color'); d.css('background-color', this.options.highlight), setTimeout(function () { e === 'transparent' && (e = ''), d.css('background-color', e), d.addClass('editable-bg-transition'), setTimeout(function () { d.removeClass('editable-bg-transition') }, 1700) }, 10) } this.setValue(b.newValue, !1, b.response) }, validate () { return typeof this.options.validate === 'function' ? this.options.validate.call(this, this.value) : void 0 }, setValue (b, c, d) { this.value = c ? this.input.str2value(b) : b, this.container && this.container.option('value', this.value), a.when(this.render(d)).then(a.proxy(function () { this.handleEmpty() }, this)) }, activate () { this.container && this.container.activate() }, destroy () { this.disable(), this.container && this.container.destroy(), this.input.destroy(), this.options.toggle !== 'manual' && (this.$element.removeClass('editable-click'), this.$element.off(this.options.toggle + '.editable')), this.$element.off('save.internal'), this.$element.removeClass('editable editable-open editable-disabled'), this.$element.removeData('editable') } }, a.fn.editable = function (c) { let d = {}; const e = arguments; const f = 'editable'; switch (c) { case 'validate':return this.each(function () { let b; const c = a(this); const e = c.data(f); e && (b = e.validate()) && (d[e.options.name] = b) }), d; case 'getValue':return arguments.length === 2 && arguments[1] === !0 ? d = this.eq(0).data(f).value : this.each(function () { const b = a(this); const c = b.data(f); c && void 0 !== c.value && c.value !== null && (d[c.options.name] = c.input.value2submit(c.value)) }), d; case 'submit':var g; var h = arguments[1] || {}; var i = this; var j = this.editable('validate'); return a.isEmptyObject(j) ? (g = this.editable('getValue'), h.data && a.extend(g, h.data), a.ajax(a.extend({ url: h.url, data: g, type: 'POST' }, h.ajaxOptions)).success(function (a) { typeof h.success === 'function' && h.success.call(i, a, h) }).error(function () { typeof h.error === 'function' && h.error.apply(i, arguments) })) : typeof h.error === 'function' && h.error.call(i, j), this } return this.each(function () { const d = a(this); let g = d.data(f); const h = typeof c === 'object' && c; return h && h.selector ? (g = new b(this, h), void 0) : (g || d.data(f, g = new b(this, h)), typeof c === 'string' && g[c].apply(g, Array.prototype.slice.call(e, 1)), void 0) }) }, a.fn.editable.defaults = { type: 'text', disabled: !1, toggle: 'click', emptytext: 'Empty', autotext: 'auto', value: null, display: null, emptyclass: 'editable-empty', unsavedclass: 'editable-unsaved', selector: null, highlight: '#FFFF80' } }(window.jQuery)), (function (a) { 'use strict'; a.fn.editabletypes = {}; const b = function () {}; b.prototype = { init (b, c, d) { this.type = b, this.options = a.extend({}, d, c) }, prerender () { this.$tpl = a(this.options.tpl), this.$input = this.$tpl, this.$clear = null, this.error = null }, render () {}, value2html (b, c) { a(c)[this.options.escape ? 'text' : 'html'](a.trim(b)) }, html2value (b) { return a('<div>').html(b).text() }, value2str (a) { return a }, str2value (a) { return a }, value2submit (a) { return a }, value2input (a) { this.$input.val(a) }, input2value () { return this.$input.val() }, activate () { this.$input.is(':visible') && this.$input.focus() }, clear () { this.$input.val(null) }, escape (b) { return a('<div>').text(b).html() }, autosubmit () {}, destroy () {}, setClass () { this.options.inputclass && this.$input.addClass(this.options.inputclass) }, setAttr (a) { void 0 !== this.options[a] && this.options[a] !== null && this.$input.attr(a, this.options[a]) }, option (a, b) { this.options[a] = b } }, b.defaults = { tpl: '', inputclass: null, escape: !0, scope: null, showbuttons: !0 }, a.extend(a.fn.editabletypes, { abstractinput: b }) }(window.jQuery)), (function (a) { 'use strict'; const b = function () {}; a.fn.editableutils.inherit(b, a.fn.editabletypes.abstractinput), a.extend(b.prototype, { render () { const b = a.Deferred(); return this.error = null, this.onSourceReady(function () { this.renderList(), b.resolve() }, function () { this.error = this.options.sourceError, b.resolve() }), b.promise() }, html2value () { return null }, value2html (b, c, d, e) { const f = a.Deferred(); const g = function () { typeof d === 'function' ? d.call(c, b, this.sourceData, e) : this.value2htmlFinal(b, c), f.resolve() }; return b === null ? g.call(this) : this.onSourceReady(g, function () { f.resolve() }), f.promise() }, onSourceReady (b, c) { let d; if (a.isFunction(this.options.source) ? (d = this.options.source.call(this.options.scope), this.sourceData = null) : d = this.options.source, this.options.sourceCache && a.isArray(this.sourceData)) { return b.call(this), void 0 } try { d = a.fn.editableutils.tryParseJson(d, !1) } catch (e) { return c.call(this), void 0 } if (typeof d === 'string') { if (this.options.sourceCache) { var f; const g = d; if (a(document).data(g) || a(document).data(g, {}), f = a(document).data(g), f.loading === !1 && f.sourceData) { return this.sourceData = f.sourceData, this.doPrepend(), b.call(this), void 0 } if (f.loading === !0) { return f.callbacks.push(a.proxy(function () { this.sourceData = f.sourceData, this.doPrepend(), b.call(this) }, this)), f.err_callbacks.push(a.proxy(c, this)), void 0 } f.loading = !0, f.callbacks = [], f.err_callbacks = [] } const h = a.extend({ url: d, type: 'get', cache: !1, dataType: 'json', success: a.proxy(function (d) { f && (f.loading = !1), this.sourceData = this.makeArray(d), a.isArray(this.sourceData) ? (f && (f.sourceData = this.sourceData, a.each(f.callbacks, function () { this.call() })), this.doPrepend(), b.call(this)) : (c.call(this), f && a.each(f.err_callbacks, function () { this.call() })) }, this), error: a.proxy(function () { c.call(this), f && (f.loading = !1, a.each(f.err_callbacks, function () { this.call() })) }, this) }, this.options.sourceOptions); a.ajax(h) } else { this.sourceData = this.makeArray(d), a.isArray(this.sourceData) ? (this.doPrepend(), b.call(this)) : c.call(this) } }, doPrepend () { this.options.prepend !== null && void 0 !== this.options.prepend && (a.isArray(this.prependData) || (a.isFunction(this.options.prepend) && (this.options.prepend = this.options.prepend.call(this.options.scope)), this.options.prepend = a.fn.editableutils.tryParseJson(this.options.prepend, !0), typeof this.options.prepend === 'string' && (this.options.prepend = { '': this.options.prepend }), this.prependData = this.makeArray(this.options.prepend)), a.isArray(this.prependData) && a.isArray(this.sourceData) && (this.sourceData = this.prependData.concat(this.sourceData))) }, renderList () {}, value2htmlFinal () {}, makeArray (b) { let c; let d; let e; let f; const g = []; if (!b || typeof b === 'string') { return null } if (a.isArray(b)) { f = function (a, b) { return d = { value: a, text: b }, c++ >= 2 ? !1 : void 0 }; for (let h = 0; h < b.length; h++) { e = b[h], typeof e === 'object' ? (c = 0, a.each(e, f), c === 1 ? g.push(d) : c > 1 && (e.children && (e.children = this.makeArray(e.children)), g.push(e))) : g.push({ value: e, text: e }) } } else { a.each(b, function (a, b) { g.push({ value: a, text: b }) }) } return g }, option (a, b) { this.options[a] = b, a === 'source' && (this.sourceData = null), a === 'prepend' && (this.prependData = null) } }), b.defaults = a.extend({}, a.fn.editabletypes.abstractinput.defaults, { source: null, prepend: !1, sourceError: 'Error when loading list', sourceCache: !0, sourceOptions: null }), a.fn.editabletypes.list = b }(window.jQuery)), (function (a) { 'use strict'; var b = function (a) { this.init('text', a, b.defaults) }; a.fn.editableutils.inherit(b, a.fn.editabletypes.abstractinput), a.extend(b.prototype, { render () { this.renderClear(), this.setClass(), this.setAttr('placeholder') }, activate () { this.$input.is(':visible') && (this.$input.focus(), a.fn.editableutils.setCursorPosition(this.$input.get(0), this.$input.val().length), this.toggleClear && this.toggleClear()) }, renderClear () { this.options.clear && (this.$clear = a('<span class="editable-clear-x"></span>'), this.$input.after(this.$clear).css('padding-right', 24).keyup(a.proxy(function (b) { if (!~a.inArray(b.keyCode, [40, 38, 9, 13, 27])) { clearTimeout(this.t); const c = this; this.t = setTimeout(function () { c.toggleClear(b) }, 100) } }, this)).parent().css('position', 'relative'), this.$clear.click(a.proxy(this.clear, this))) }, postrender () {}, toggleClear () { if (this.$clear) { const a = this.$input.val().length; const b = this.$clear.is(':visible'); a && !b && this.$clear.show(), !a && b && this.$clear.hide() } }, clear () { this.$clear.hide(), this.$input.val('').focus() } }), b.defaults = a.extend({}, a.fn.editabletypes.abstractinput.defaults, { tpl: '<input type="text">', placeholder: null, clear: !0 }), a.fn.editabletypes.text = b }(window.jQuery)), (function (a) { 'use strict'; var b = function (a) { this.init('textarea', a, b.defaults) }; a.fn.editableutils.inherit(b, a.fn.editabletypes.abstractinput), a.extend(b.prototype, { render () { this.setClass(), this.setAttr('placeholder'), this.setAttr('rows'), this.$input.keydown(function (b) { b.ctrlKey && b.which === 13 && a(this).closest('form').submit() }) }, activate () { a.fn.editabletypes.text.prototype.activate.call(this) } }), b.defaults = a.extend({}, a.fn.editabletypes.abstractinput.defaults, { tpl: '<textarea></textarea>', inputclass: 'input-large', placeholder: null, rows: 7 }), a.fn.editabletypes.textarea = b }(window.jQuery)), (function (a) { 'use strict'; var b = function (a) { this.init('select', a, b.defaults) }; a.fn.editableutils.inherit(b, a.fn.editabletypes.list), a.extend(b.prototype, { renderList () { this.$input.empty(); var b = function (c, d) { let e; if (a.isArray(d)) { for (let f = 0; f < d.length; f++) { e = {}, d[f].children ? (e.label = d[f].text, c.append(b(a('<optgroup>', e), d[f].children))) : (e.value = d[f].value, d[f].disabled && (e.disabled = !0), c.append(a('<option>', e).text(d[f].text))) } } return c }; b(this.$input, this.sourceData), this.setClass(), this.$input.on('keydown.editable', function (b) { b.which === 13 && a(this).closest('form').submit() }) }, value2htmlFinal (b, c) { let d = ''; const e = a.fn.editableutils.itemsByValue(b, this.sourceData); e.length && (d = e[0].text), a.fn.editabletypes.abstractinput.prototype.value2html.call(this, d, c) }, autosubmit () { this.$input.off('keydown.editable').on('change.editable', function () { a(this).closest('form').submit() }) } }), b.defaults = a.extend({}, a.fn.editabletypes.list.defaults, { tpl: '<select></select>' }), a.fn.editabletypes.select = b }(window.jQuery)), (function (a) { 'use strict'; var b = function (a) { this.init('checklist', a, b.defaults) }; a.fn.editableutils.inherit(b, a.fn.editabletypes.list), a.extend(b.prototype, { renderList () { let b; if (this.$tpl.empty(), a.isArray(this.sourceData)) { for (let c = 0; c < this.sourceData.length; c++) { b = a('<label>').append(a('<input>', { type: 'checkbox', value: this.sourceData[c].value })).append(a('<span>').text(' ' + this.sourceData[c].text)), a('<div>').append(b).appendTo(this.$tpl) } this.$input = this.$tpl.find('input[type="checkbox"]'), this.setClass() } }, value2str (b) { return a.isArray(b) ? b.sort().join(a.trim(this.options.separator)) : '' }, str2value (b) { let c; let d = null; return typeof b === 'string' && b.length ? (c = new RegExp('\\s*' + a.trim(this.options.separator) + '\\s*'), d = b.split(c)) : d = a.isArray(b) ? b : [b], d }, value2input (b) { this.$input.prop('checked', !1), a.isArray(b) && b.length && this.$input.each(function (c, d) { const e = a(d); a.each(b, function (a, b) { e.val() == b && e.prop('checked', !0) }) }) }, input2value () { const b = []; return this.$input.filter(':checked').each(function (c, d) { b.push(a(d).val()) }), b }, value2htmlFinal (b, c) { const d = []; const e = a.fn.editableutils.itemsByValue(b, this.sourceData); const f = this.options.escape; e.length ? (a.each(e, function (b, c) { const e = f ? a.fn.editableutils.escape(c.text) : c.text; d.push(e) }), a(c).html(d.join('<br>'))) : a(c).empty() }, activate () { this.$input.first().focus() }, autosubmit () { this.$input.on('keydown', function (b) { b.which === 13 && a(this).closest('form').submit() }) } }), b.defaults = a.extend({}, a.fn.editabletypes.list.defaults, { tpl: '<div class="editable-checklist"></div>', inputclass: null, separator: ',' }), a.fn.editabletypes.checklist = b }(window.jQuery)), (function (a) { 'use strict'; var b = function (a) { this.init('password', a, b.defaults) }; a.fn.editableutils.inherit(b, a.fn.editabletypes.text), a.extend(b.prototype, { value2html (b, c) { b ? a(c).text('[hidden]') : a(c).empty() }, html2value () { return null } }), b.defaults = a.extend({}, a.fn.editabletypes.text.defaults, { tpl: '<input type="password">' }), a.fn.editabletypes.password = b }(window.jQuery)), (function (a) { 'use strict'; var b = function (a) { this.init('email', a, b.defaults) }; a.fn.editableutils.inherit(b, a.fn.editabletypes.text), b.defaults = a.extend({}, a.fn.editabletypes.text.defaults, { tpl: '<input type="email">' }), a.fn.editabletypes.email = b }(window.jQuery)), (function (a) { 'use strict'; var b = function (a) { this.init('url', a, b.defaults) }; a.fn.editableutils.inherit(b, a.fn.editabletypes.text), b.defaults = a.extend({}, a.fn.editabletypes.text.defaults, { tpl: '<input type="url">' }), a.fn.editabletypes.url = b }(window.jQuery)), (function (a) { 'use strict'; var b = function (a) { this.init('tel', a, b.defaults) }; a.fn.editableutils.inherit(b, a.fn.editabletypes.text), b.defaults = a.extend({}, a.fn.editabletypes.text.defaults, { tpl: '<input type="tel">' }), a.fn.editabletypes.tel = b }(window.jQuery)), (function (a) { 'use strict'; var b = function (a) { this.init('number', a, b.defaults) }; a.fn.editableutils.inherit(b, a.fn.editabletypes.text), a.extend(b.prototype, { render () { b.superclass.render.call(this), this.setAttr('min'), this.setAttr('max'), this.setAttr('step') }, postrender () { this.$clear && this.$clear.css({ right: 24 }) } }), b.defaults = a.extend({}, a.fn.editabletypes.text.defaults, { tpl: '<input type="number">', inputclass: 'input-mini', min: null, max: null, step: null }), a.fn.editabletypes.number = b }(window.jQuery)), (function (a) { 'use strict'; var b = function (a) { this.init('range', a, b.defaults) }; a.fn.editableutils.inherit(b, a.fn.editabletypes.number), a.extend(b.prototype, { render () { this.$input = this.$tpl.filter('input'), this.setClass(), this.setAttr('min'), this.setAttr('max'), this.setAttr('step'), this.$input.on('input', function () { a(this).siblings('output').text(a(this).val()) }) }, activate () { this.$input.focus() } }), b.defaults = a.extend({}, a.fn.editabletypes.number.defaults, { tpl: '<input type="range"><output style="width: 30px; display: inline-block"></output>', inputclass: 'input-medium' }), a.fn.editabletypes.range = b }(window.jQuery)), (function (a) {
  'use strict'; var b = function (a) {
    this.init('time', a, b.defaults)
  }; a.fn.editableutils.inherit(b, a.fn.editabletypes.abstractinput), a.extend(b.prototype, { render () { this.setClass() } }), b.defaults = a.extend({}, a.fn.editabletypes.abstractinput.defaults, { tpl: '<input type="time">' }), a.fn.editabletypes.time = b
}(window.jQuery)), (function (a) { 'use strict'; var b = function (c) { if (this.init('select2', c, b.defaults), c.select2 = c.select2 || {}, this.sourceData = null, c.placeholder && (c.select2.placeholder = c.placeholder), !c.select2.tags && c.source) { let d = c.source; a.isFunction(c.source) && (d = c.source.call(c.scope)), typeof d === 'string' ? (c.select2.ajax = c.select2.ajax || {}, c.select2.ajax.data || (c.select2.ajax.data = function (a) { return { query: a } }), c.select2.ajax.results || (c.select2.ajax.results = function (a) { return { results: a } }), c.select2.ajax.url = d) : (this.sourceData = this.convertSource(d), c.select2.data = this.sourceData) } if (this.options.select2 = a.extend({}, b.defaults.select2, c.select2), this.isMultiple = this.options.select2.tags || this.options.select2.multiple, this.isRemote = 'ajax' in this.options.select2, this.idFunc = this.options.select2.id, typeof this.idFunc !== 'function') { const e = this.idFunc || 'id'; this.idFunc = function (a) { return a[e] } } this.formatSelection = this.options.select2.formatSelection, typeof this.formatSelection !== 'function' && (this.formatSelection = function (a) { return a.text }) }; a.fn.editableutils.inherit(b, a.fn.editabletypes.abstractinput), a.extend(b.prototype, { render () { this.setClass(), this.isRemote && this.$input.on('select2-loaded', a.proxy(function (a) { this.sourceData = a.items.results }, this)), this.isMultiple && this.$input.on('change', function () { a(this).closest('form').parent().triggerHandler('resize') }) }, value2html (c, d) { let e; let f = ''; const g = this; this.options.select2.tags ? e = c : this.sourceData && (e = a.fn.editableutils.itemsByValue(c, this.sourceData, this.idFunc)), a.isArray(e) ? (f = [], a.each(e, function (a, b) { f.push(b && typeof b === 'object' ? g.formatSelection(b) : b) })) : e && (f = g.formatSelection(e)), f = a.isArray(f) ? f.join(this.options.viewseparator) : f, b.superclass.value2html.call(this, f, d) }, html2value (a) { return this.options.select2.tags ? this.str2value(a, this.options.viewseparator) : null }, value2input (b) { if (this.$input.data('select2') ? this.$input.val(b).trigger('change', !0) : (this.$input.val(b), this.$input.select2(this.options.select2)), this.isRemote && !this.isMultiple && !this.options.select2.initSelection) { const c = this.options.select2.id; const d = this.options.select2.formatSelection; if (!c && !d) { const e = { id: b, text: a(this.options.scope).text() }; this.$input.select2('data', e) } } }, input2value () { return this.$input.select2('val') }, str2value (b, c) { if (typeof b !== 'string' || !this.isMultiple) { return b } c = c || this.options.select2.separator || a.fn.select2.defaults.separator; let d, e, f; if (b === null || b.length < 1) { return null } for (d = b.split(c), e = 0, f = d.length; f > e; e += 1) { d[e] = a.trim(d[e]) } return d }, autosubmit () { this.$input.on('change', function (b, c) { c || a(this).closest('form').submit() }) }, convertSource (b) { if (a.isArray(b) && b.length && void 0 !== b[0].value) { for (let c = 0; c < b.length; c++) { void 0 !== b[c].value && (b[c].id = b[c].value, delete b[c].value) } } return b }, destroy () { this.$input.data('select2') && this.$input.select2('destroy') } }), b.defaults = a.extend({}, a.fn.editabletypes.abstractinput.defaults, { tpl: '<input type="hidden">', select2: null, placeholder: null, source: null, viewseparator: ', ' }), a.fn.editabletypes.select2 = b }(window.jQuery)), (function (a) { const b = function (b, c) { return this.$element = a(b), this.$element.is('input') ? (this.options = a.extend({}, a.fn.combodate.defaults, c, this.$element.data()), this.init(), void 0) : (a.error('Combodate should be applied to INPUT element'), void 0) }; b.prototype = { constructor: b, init () { this.map = { day: ['D', 'date'], month: ['M', 'month'], year: ['Y', 'year'], hour: ['[Hh]', 'hours'], minute: ['m', 'minutes'], second: ['s', 'seconds'], ampm: ['[Aa]', ''] }, this.$widget = a('<span class="combodate"></span>').html(this.getTemplate()), this.initCombos(), this.$widget.on('change', 'select', a.proxy(function () { this.$element.val(this.getValue()) }, this)), this.$widget.find('select').css('width', 'auto'), this.$element.hide().after(this.$widget), this.setValue(this.$element.val() || this.options.value) }, getTemplate () { let b = this.options.template; return a.each(this.map, function (a, c) { c = c[0]; const d = new RegExp(c + '+'); const e = c.length > 1 ? c.substring(1, 2) : c; b = b.replace(d, '{' + e + '}') }), b = b.replace(/ /g, '&nbsp;'), a.each(this.map, function (a, c) { c = c[0]; const d = c.length > 1 ? c.substring(1, 2) : c; b = b.replace('{' + d + '}', '<select class="' + a + '"></select>') }), b }, initCombos () { const b = this; a.each(this.map, function (a) { let c; let d; const e = b.$widget.find('.' + a); e.length && (b['$' + a] = e, c = 'fill' + a.charAt(0).toUpperCase() + a.slice(1), d = b[c](), b['$' + a].html(b.renderItems(d))) }) }, initItems (a) { let b; const c = []; if (this.options.firstItem === 'name') { b = moment.relativeTime || moment.langData()._relativeTime; let d = typeof b[a] === 'function' ? b[a](1, !0, a, !1) : b[a]; d = d.split(' ').reverse()[0], c.push(['', d]) } else { this.options.firstItem === 'empty' && c.push(['', '']) } return c }, renderItems (a) { for (var b = [], c = 0; c < a.length; c++) { b.push('<option value="' + a[c][0] + '">' + a[c][1] + '</option>') } return b.join('\n') }, fillDay () { let a; let b; const c = this.initItems('d'); const d = this.options.template.includes('DD'); for (b = 1; b <= 31; b++) { a = d ? this.leadZero(b) : b, c.push([b, a]) } return c }, fillMonth () { let a; let b; const c = this.initItems('M'); const d = this.options.template.includes('MMMM'); const e = this.options.template.includes('MMM'); const f = this.options.template.includes('MM'); for (b = 0; b <= 11; b++) { a = d ? moment().date(1).month(b).format('MMMM') : e ? moment().date(1).month(b).format('MMM') : f ? this.leadZero(b + 1) : b + 1, c.push([b, a]) } return c }, fillYear () { let a; let b; let c = []; const d = this.options.template.includes('YYYY'); for (b = this.options.maxYear; b >= this.options.minYear; b--) { a = d ? b : (b + '').substring(2), c[this.options.yearDescending ? 'push' : 'unshift']([b, a]) } return c = this.initItems('y').concat(c) }, fillHour () { let a; let b; const c = this.initItems('h'); const d = this.options.template.includes('h'); const e = (this.options.template.includes('H'), this.options.template.toLowerCase().includes('hh')); const f = d ? 1 : 0; const g = d ? 12 : 23; for (b = f; g >= b; b++) { a = e ? this.leadZero(b) : b, c.push([b, a]) } return c }, fillMinute () { let a; let b; const c = this.initItems('m'); const d = this.options.template.includes('mm'); for (b = 0; b <= 59; b += this.options.minuteStep) { a = d ? this.leadZero(b) : b, c.push([b, a]) } return c }, fillSecond () { let a; let b; const c = this.initItems('s'); const d = this.options.template.includes('ss'); for (b = 0; b <= 59; b += this.options.secondStep) { a = d ? this.leadZero(b) : b, c.push([b, a]) } return c }, fillAmpm () { const a = this.options.template.includes('a'); const b = (this.options.template.includes('A'), [['am', a ? 'am' : 'AM'], ['pm', a ? 'pm' : 'PM']]); return b }, getValue (b) { let c; const d = {}; const e = this; let f = !1; return a.each(this.map, function (a) { if (a !== 'ampm') { const b = a === 'day' ? 1 : 0; return d[a] = e['$' + a] ? parseInt(e['$' + a].val(), 10) : b, isNaN(d[a]) ? (f = !0, !1) : void 0 } }), f ? '' : (this.$ampm && (d.hour = d.hour === 12 ? this.$ampm.val() === 'am' ? 0 : 12 : this.$ampm.val() === 'am' ? d.hour : d.hour + 12), c = moment([d.year, d.month, d.day, d.hour, d.minute, d.second]), this.highlight(c), b = void 0 === b ? this.options.format : b, b === null ? c.isValid() ? c : null : c.isValid() ? c.format(b) : '') }, setValue (b) { function c (b, c) { let d = {}; return b.children('option').each(function (b, e) { let f; const g = a(e).attr('value'); g !== '' && (f = Math.abs(g - c), (typeof d.distance === 'undefined' || f < d.distance) && (d = { value: g, distance: f })) }), d.value } if (b) { const d = typeof b === 'string' ? moment(b, this.options.format) : moment(b); const e = this; const f = {}; d.isValid() && (a.each(this.map, function (a, b) { a !== 'ampm' && (f[a] = d[b[1]]()) }), this.$ampm && (f.hour >= 12 ? (f.ampm = 'pm', f.hour > 12 && (f.hour -= 12)) : (f.ampm = 'am', f.hour === 0 && (f.hour = 12))), a.each(f, function (a, b) { e['$' + a] && (a === 'minute' && e.options.minuteStep > 1 && e.options.roundTime && (b = c(e['$' + a], b)), a === 'second' && e.options.secondStep > 1 && e.options.roundTime && (b = c(e['$' + a], b)), e['$' + a].val(b)) }), this.$element.val(d.format(this.options.format))) } }, highlight (a) { a.isValid() ? this.options.errorClass ? this.$widget.removeClass(this.options.errorClass) : this.$widget.find('select').css('border-color', this.borderColor) : this.options.errorClass ? this.$widget.addClass(this.options.errorClass) : (this.borderColor || (this.borderColor = this.$widget.find('select').css('border-color')), this.$widget.find('select').css('border-color', 'red')) }, leadZero (a) { return a <= 9 ? '0' + a : a }, destroy () { this.$widget.remove(), this.$element.removeData('combodate').show() } }, a.fn.combodate = function (c) { let d; const e = Array.apply(null, arguments); return e.shift(), c === 'getValue' && this.length && (d = this.eq(0).data('combodate')) ? d.getValue.apply(d, e) : this.each(function () { const d = a(this); let f = d.data('combodate'); const g = typeof c === 'object' && c; f || d.data('combodate', f = new b(this, g)), typeof c === 'string' && typeof f[c] === 'function' && f[c].apply(f, e) }) }, a.fn.combodate.defaults = { format: 'DD-MM-YYYY HH:mm', template: 'D / MMM / YYYY   H : mm', value: null, minYear: 1970, maxYear: 2015, yearDescending: !0, minuteStep: 5, secondStep: 1, firstItem: 'empty', errorClass: null, roundTime: !0 } }(window.jQuery)), (function (a) { 'use strict'; var b = function (c) { this.init('combodate', c, b.defaults), this.options.viewformat || (this.options.viewformat = this.options.format), c.combodate = a.fn.editableutils.tryParseJson(c.combodate, !0), this.options.combodate = a.extend({}, b.defaults.combodate, c.combodate, { format: this.options.format, template: this.options.template }) }; a.fn.editableutils.inherit(b, a.fn.editabletypes.abstractinput), a.extend(b.prototype, { render () { this.$input.combodate(this.options.combodate), a.fn.editableform.engine === 'bs3' && this.$input.siblings().find('select').addClass('form-control'), this.options.inputclass && this.$input.siblings().find('select').addClass(this.options.inputclass) }, value2html (a, c) { const d = a ? a.format(this.options.viewformat) : ''; b.superclass.value2html.call(this, d, c) }, html2value (a) { return a ? moment(a, this.options.viewformat) : null }, value2str (a) { return a ? a.format(this.options.format) : '' }, str2value (a) { return a ? moment(a, this.options.format) : null }, value2submit (a) { return this.value2str(a) }, value2input (a) { this.$input.combodate('setValue', a) }, input2value () { return this.$input.combodate('getValue', null) }, activate () { this.$input.siblings('.combodate').find('select').eq(0).focus() }, autosubmit () {} }), b.defaults = a.extend({}, a.fn.editabletypes.abstractinput.defaults, { tpl: '<input type="text">', inputclass: null, format: 'YYYY-MM-DD', viewformat: null, template: 'D / MMM / YYYY', combodate: null }), a.fn.editabletypes.combodate = b }(window.jQuery)), (function (a) { 'use strict'; a.extend(a.fn.editableform.Constructor.prototype, { initButtons () { const b = this.$form.find('.editable-buttons'); b.append(a.fn.editableform.buttons), this.options.showbuttons === 'bottom' && b.addClass('editable-buttons-bottom'), this.$form.find('.editable-submit').button({ icons: { primary: 'ui-icon-check' }, text: !1 }).removeAttr('title'), this.$form.find('.editable-cancel').button({ icons: { primary: 'ui-icon-closethick' }, text: !1 }).removeAttr('title') } }), a.fn.editableform.errorGroupClass = null, a.fn.editableform.errorBlockClass = 'ui-state-error', a.fn.editableform.engine = 'jquery-ui' }(window.jQuery)), (function (a) { 'use strict'; a.extend(a.fn.editableContainer.Popup.prototype, { containerName: 'tooltip', containerDataName: 'ui-tooltip', innerCss: '.ui-tooltip-content', defaults: a.ui.tooltip.prototype.options, splitOptions () { if (this.containerOptions = {}, this.formOptions = {}, !a.ui[this.containerName]) { return a.error('Please use jQueryUI with "tooltip" widget! http://jqueryui.com/download'), void 0 } for (const b in this.options) { b in this.defaults ? this.containerOptions[b] = this.options[b] : this.formOptions[b] = this.options[b] } }, initContainer () { this.handlePlacement(), a.extend(this.containerOptions, { items: '*', content: ' ', track: !1, open: a.proxy(function () { this.container()._on(this.container().element, { mouseleave (a) { a.stopImmediatePropagation() }, focusout (a) { a.stopImmediatePropagation() } }) }, this) }), this.call(this.containerOptions), this.container()._off(this.container().element, 'mouseover focusin') }, tip () { return this.container() ? this.container()._find(this.container().element) : null }, innerShow () { this.call('open'); const b = this.options.title || this.$element.data('ui-tooltip-title') || this.$element.data('originalTitle'); this.tip().find(this.innerCss).empty().append(a('<label>').text(b)) }, innerHide () { this.call('close') }, innerDestroy () {}, setPosition () { this.tip().position(a.extend({ of: this.$element }, this.containerOptions.position)) }, handlePlacement () { let a; switch (this.options.placement) { case 'top':a = { my: 'center bottom-5', at: 'center top', collision: 'flipfit' }; break; case 'right':a = { my: 'left+5 center', at: 'right center', collision: 'flipfit' }; break; case 'bottom':a = { my: 'center top+5', at: 'center bottom', collision: 'flipfit' }; break; case 'left':a = { my: 'right-5 center', at: 'left center', collision: 'flipfit' } } this.containerOptions.position = a } }) }(window.jQuery)), (function (a) { 'use strict'; var b = function (a) { this.init('dateui', a, b.defaults), this.initPicker(a, b.defaults) }; a.fn.editableutils.inherit(b, a.fn.editabletypes.abstractinput), a.extend(b.prototype, { initPicker (b, c) { this.options.viewformat || (this.options.viewformat = this.options.format), this.options.viewformat = this.options.viewformat.replace('yyyy', 'yy'), this.options.format = this.options.format.replace('yyyy', 'yy'), this.options.datepicker = a.extend({}, c.datepicker, b.datepicker, { dateFormat: this.options.viewformat }) }, render () { this.$input.datepicker(this.options.datepicker), this.options.clear && (this.$clear = a('<a href="#"></a>').html(this.options.clear).click(a.proxy(function (a) { a.preventDefault(), a.stopPropagation(), this.clear() }, this)), this.$tpl.parent().append(a('<div class="editable-clear">').append(this.$clear))) }, value2html (c, d) { const e = a.datepicker.formatDate(this.options.viewformat, c); b.superclass.value2html.call(this, e, d) }, html2value (b) { if (typeof b !== 'string') { return b } let c; try { c = a.datepicker.parseDate(this.options.viewformat, b) } catch (d) {} return c }, value2str (b) { return a.datepicker.formatDate(this.options.format, b) }, str2value (b) { if (typeof b !== 'string') { return b } let c; try { c = a.datepicker.parseDate(this.options.format, b) } catch (d) {} return c }, value2submit (a) { return this.value2str(a) }, value2input (a) { this.$input.datepicker('setDate', a) }, input2value () { return this.$input.datepicker('getDate') }, activate () {}, clear () { this.$input.datepicker('setDate', null) }, autosubmit () { this.$input.on('mouseup', 'table.ui-datepicker-calendar a.ui-state-default', function () { const b = a(this).closest('form'); setTimeout(function () { b.submit() }, 200) }) } }), b.defaults = a.extend({}, a.fn.editabletypes.abstractinput.defaults, { tpl: '<div class="editable-date"></div>', inputclass: null, format: 'yyyy-mm-dd', viewformat: null, datepicker: { firstDay: 0, changeYear: !0, changeMonth: !0, showOtherMonths: !0 }, clear: '&times; clear' }), a.fn.editabletypes.dateui = b }(window.jQuery)), (function (a) { 'use strict'; var b = function (a) { this.init('dateuifield', a, b.defaults), this.initPicker(a, b.defaults) }; a.fn.editableutils.inherit(b, a.fn.editabletypes.dateui), a.extend(b.prototype, { render () { this.$input.datepicker(this.options.datepicker), a.fn.editabletypes.text.prototype.renderClear.call(this) }, value2input (b) { this.$input.val(a.datepicker.formatDate(this.options.viewformat, b)) }, input2value () { return this.html2value(this.$input.val()) }, activate () { a.fn.editabletypes.text.prototype.activate.call(this) }, toggleClear () { a.fn.editabletypes.text.prototype.toggleClear.call(this) }, autosubmit () {} }), b.defaults = a.extend({}, a.fn.editabletypes.dateui.defaults, { tpl: '<input type="text"/>', inputclass: null, datepicker: { showOn: 'button', buttonImage: 'http://jqueryui.com/resources/demos/datepicker/images/calendar.gif', buttonImageOnly: !0, firstDay: 0, changeYear: !0, changeMonth: !0, showOtherMonths: !0 }, clear: !1 }), a.fn.editabletypes.dateuifield = b }(window.jQuery))
